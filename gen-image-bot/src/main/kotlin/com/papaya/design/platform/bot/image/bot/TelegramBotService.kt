package com.papaya.design.platform.bot.image.bot

import com.github.kotlintelegrambot.bot
import com.github.kotlintelegrambot.dispatch
import com.github.kotlintelegrambot.dispatcher.command
import com.github.kotlintelegrambot.dispatcher.message
import com.github.kotlintelegrambot.entities.ChatId
import com.github.kotlintelegrambot.entities.ReplyKeyboardRemove
import com.github.kotlintelegrambot.entities.TelegramFile
import com.github.kotlintelegrambot.entities.files.PhotoSize
import com.github.kotlintelegrambot.entities.KeyboardReplyMarkup
import com.github.kotlintelegrambot.entities.keyboard.KeyboardButton
import com.github.kotlintelegrambot.network.fold
import com.papaya.design.platform.ai.AiImageService
import jakarta.annotation.PostConstruct
import kotlinx.coroutines.runBlocking
import mu.KotlinLogging
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.beans.factory.annotation.Value
import org.springframework.stereotype.Service
import java.net.URL
import java.util.Base64.getDecoder
import java.util.concurrent.ConcurrentHashMap

private val log = KotlinLogging.logger { }

private const val START_CMD = "start"
private const val REAL_IMAGE_CMD = "image"
private const val HELLO_CMD = "hello"

@Service
class TelegramBotService(
    @Value("\${telegram.api-key}")
    private val apiKey: String,
    @Autowired
    private val aiImageService: AiImageService
) : BotService {

    // –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    private val usersWaitingForImage = ConcurrentHashMap<Long, Boolean>()

    // –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–º, –∫–∞–∫–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    private val welcomedUsers = ConcurrentHashMap<Long, Boolean>()

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
     */
    private fun createMainKeyboard(): KeyboardReplyMarkup {
        return KeyboardReplyMarkup(
            keyboard = listOf(
                listOf(
                    KeyboardButton("üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞"),
                    KeyboardButton("üëã –ü—Ä–∏–≤–µ—Ç")
                )
            ),
            resizeKeyboard = true,
            oneTimeKeyboard = false
        )
    }
    private fun welcomeKeyboard(): KeyboardReplyMarkup {
        return KeyboardReplyMarkup(
            keyboard = listOf(
                listOf(
                    KeyboardButton("‚ú® –ù–∞—á–∞—Ç—å"),
                )
            ),
            resizeKeyboard = true,
            oneTimeKeyboard = false
        )
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
     */
    private fun removeKeyboard(): ReplyKeyboardRemove {
        return ReplyKeyboardRemove(removeKeyboard = true)
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    private fun sendFirstTimeWelcome(chatId: Long) {
        val welcomeResult = bot.sendMessage(
            chatId = ChatId.fromId(chatId),
            text = """
                Roomio by DIROMANOVA ‚Äì –∏–Ω—Ç–µ—Ä—å–µ—Ä –≤–∞—à–µ–π –º–µ—á—Ç—ã –∑–∞ –ø–∞—Ä—É –º–∏–Ω—É—Ç!
                –ó–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –¥–æ–ª–≥–∏–µ —Ä–µ–Ω–¥–µ—Ä—ã –∏ –¥–æ—Ä–æ–≥–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:
                ‚ú®	–•–æ—Ç–∏—Ç–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∫–æ–ª–ª–∞–∂—É –∏–ª–∏ –º—É–¥–±–æ—Ä–¥—É?
                üè†	–ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—å–µ—Ä –ø–æ –≤–∞—à–µ–º—É —Ñ–æ—Ç–æ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é?
                üé®	–ò–ª–∏ –≥–æ—Ç–æ–≤—ã —Ü–µ–ª–∏–∫–æ–º –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –ò–ò, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—Å—Ç —Å—Ç–∏–ª—å–Ω—ã–π –∏ —É—é—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—å–µ—Ä –¥–ª—è –∂–∏–∑–Ω–∏ –∏–ª–∏ –ø—Ä–æ–¥–∞–∂–∏?
                 –ü—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ, –∫–æ–ª–ª–∞–∂ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–¥–µ—é ‚Äì –¥–∞–ª—å—à–µ –ø–æ—Ä–∞–±–æ—Ç–∞–µ—Ç Roomio. 
                 –ó–∞ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º –∏ —Ä–∞–±–æ—Ç–∞–º–∏: @Roomio_DIROMANOVA
                 –í–∞—à–∏ –∏–¥–µ–∏. –í–∞—à –¥–∏–∑–∞–π–Ω. –í–∞—à–µ ¬´—è –¥–æ–º–∞¬ª. 
                 –ù–∞–∂–º–∏—Ç–µ /start - —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –∏–Ω—Ç–µ—Ä—å–µ—Ä –º–µ—á—Ç—ã –≤–º–µ—Å—Ç–µ.
            """.trimIndent(),
            replyMarkup = welcomeKeyboard()
        )

        welcomeResult.fold({
            welcomedUsers[chatId] = true
            log.info("First-time welcome sent to user $chatId")
        }, { e ->
            log.error("Error sending first-time welcome to user $chatId: $e")
        })
    }

    private val bot = bot {
        token = apiKey
        dispatch {
            command(START_CMD) {
                val chatId = message.chat.id

                // –û—Ç–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–Ω–Ω–æ–≥–æ
                welcomedUsers[chatId] = true

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                val welcomeResult = bot.sendMessage(
                    chatId = ChatId.fromId(chatId),
                    text = "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—å–µ—Ä–æ–≤!"
                )

                welcomeResult.fold({
                    // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
                    val menuResult = bot.sendMessage(
                        chatId = ChatId.fromId(chatId),
                        text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        replyMarkup = createMainKeyboard()
                    )
                    menuResult.fold({
                        log.info("Start command processed for user $chatId")
                    }, { e ->
                        log.error("Error showing menu in $START_CMD command: $e")
                    })
                }, { e ->
                    log.error("Error in $START_CMD command: $e")
                })
            }
            command(HELLO_CMD) {
                val chatId = message.chat.id

                // –û—Ç–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–Ω–Ω–æ–≥–æ
                welcomedUsers[chatId] = true

                val result = bot.sendMessage(
                    chatId = ChatId.fromId(chatId),
                    text = "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    replyMarkup = createMainKeyboard()
                )
                result.fold({
                    // do nothing
                }, { e ->
                    log.info("Error in $HELLO_CMD command")
                })
            }
            command(REAL_IMAGE_CMD) {
                val chatId = message.chat.id

                // –û—Ç–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–Ω–Ω–æ–≥–æ
                welcomedUsers[chatId] = true
                usersWaitingForImage[chatId] = true

                val result = bot.sendMessage(
                    chatId = ChatId.fromId(chatId),
                    text = "–ù–∞—á–Ω–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
                    replyMarkup = removeKeyboard()
                )
                result.fold({
                    log.info("User $chatId is now waiting for image")
                }, { e ->
                    log.error("Error in $REAL_IMAGE_CMD command: $e")
                    usersWaitingForImage.remove(chatId)
                })
            }

            message {
                val chatId = message.chat.id
                val messageText = message.text

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–≤—ã–π –ª–∏ —Ä–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –±–æ—Ç–æ–º
                if (welcomedUsers[chatId] != true) {
                    sendFirstTimeWelcome(chatId)
                    return@message
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if (usersWaitingForImage[chatId] == true && message.photo != null) {
                    handlePhotoMessage(chatId, message.photo!!)
                } else if (usersWaitingForImage[chatId] == true) {
                    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –Ω–µ —Ñ–æ—Ç–æ
                    bot.sendMessage(
                        chatId = ChatId.fromId(chatId),
                        text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞."
                    )
                } else {
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
                    when (messageText) {
                        "üëã –ü—Ä–∏–≤–µ—Ç" -> {
                            bot.sendMessage(
                                chatId = ChatId.fromId(chatId),
                                text = "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                replyMarkup = createMainKeyboard()
                            )
                        }

                        "‚ú® –ù–∞—á–∞—Ç—å" -> {
                            bot.sendMessage(
                                chatId = ChatId.fromId(chatId),
                                text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                replyMarkup = createMainKeyboard()
                            )
                        }

                        "üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞" -> {
                            usersWaitingForImage[chatId] = true
                            bot.sendMessage(
                                chatId = ChatId.fromId(chatId),
                                text = "–ù–∞—á–Ω–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
                                replyMarkup = removeKeyboard()
                            )
                        }
                    }
                }
            }

        }
    }

    @PostConstruct
    fun init() {
        bot.startPolling()
        log.info { "Telegram bot started" }
    }

    private fun handlePhotoMessage(chatId: Long, photos: List<PhotoSize>) {
        try {
            usersWaitingForImage.remove(chatId)

            bot.sendMessage(
                chatId = ChatId.fromId(chatId),
                text = "–ü–æ–ª—É—á–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞..."
            )

            val firstPhoto = photos.first()


            // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            val fileResult = bot.getFile(firstPhoto.fileId)

            fileResult.fold({ file ->
                val fileUrl = "https://api.telegram.org/file/bot$apiKey/${file?.result?.filePath}"

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ ByteArray
                val imageBytes = downloadImageAsBytes(fileUrl)

                // –í—ã–∑—ã–≤–∞–µ–º AI —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                runBlocking {
                    aiImageService.generateImage(
                        userPrompt = null,
                        images = arrayOf(imageBytes)
                    ) { base64Image ->
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        sendGeneratedImage(chatId, base64Image)
                    }
                }

            }, { error ->
                log.error("Error getting file: $error")
                bot.sendMessage(
                    chatId = ChatId.fromId(chatId),
                    text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: $error",
                    replyMarkup = createMainKeyboard()
                )
            })

        } catch (e: Exception) {
            log.error("Error handling photo message: ${e.message}", e)
            bot.sendMessage(
                chatId = ChatId.fromId(chatId),
                text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${e.message}",
                replyMarkup = createMainKeyboard()
            )
        }
    }

    private fun downloadImageAsBytes(url: String): ByteArray {
        return URL(url).readBytes()
    }

    private fun sendGeneratedImage(chatId: Long, base64Image: String) {
        try {
            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –≤ ByteArray
            val imageBytes = getDecoder().decode(base64Image)

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Telegram API
            val result = bot.sendPhoto(
                chatId = ChatId.fromId(chatId),
                photo = TelegramFile.ByByteArray(
                    fileBytes = imageBytes,
                    filename = "generated_interior_${System.currentTimeMillis()}.png"
                ),
                caption = "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—å–µ—Ä –≥–æ—Ç–æ–≤! üè†‚ú®"
            )

            result.fold({
                log.info("Successfully sent generated image to user $chatId")
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                bot.sendMessage(
                    chatId = ChatId.fromId(chatId),
                    text = "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
                    replyMarkup = createMainKeyboard()
                )
            }, { error ->
                log.error("Error sending generated image: $error")
                bot.sendMessage(
                    chatId = ChatId.fromId(chatId),
                    text = "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $error",
                    replyMarkup = createMainKeyboard()
                )
            })

        } catch (e: Exception) {
            log.error("Error sending generated image: ${e.message}", e)
            bot.sendMessage(
                chatId = ChatId.fromId(chatId),
                text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${e.message}",
                replyMarkup = createMainKeyboard()
            )
        }
    }
}