package com.papaya.design.platform.bot.image.bot

import com.github.kotlintelegrambot.bot
import com.github.kotlintelegrambot.dispatch
import com.github.kotlintelegrambot.dispatcher.command
import com.github.kotlintelegrambot.dispatcher.message
import com.github.kotlintelegrambot.entities.ChatId
import com.github.kotlintelegrambot.entities.TelegramFile
import com.github.kotlintelegrambot.entities.files.PhotoSize
import com.github.kotlintelegrambot.network.fold
import com.papaya.design.platform.ai.AiImageService
import jakarta.annotation.PostConstruct
import kotlinx.coroutines.runBlocking
import mu.KotlinLogging
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.beans.factory.annotation.Qualifier
import org.springframework.beans.factory.annotation.Value
import org.springframework.stereotype.Service
import java.net.URL
import java.util.Base64.getDecoder
import java.util.concurrent.ConcurrentHashMap

private val log = KotlinLogging.logger { }

private const val REAL_IMAGE_CMD = "real-image"
private const val HELLO_CMD = "hello"

@Service
class TelegramBotService(
    @Value("\${telegram.api-key}")
    private val apiKey: String,
    @Autowired
    @Qualifier("openAiImageService")
    private val aiImageService: AiImageService
) : BotService {
    
    // –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    private val usersWaitingForImage = ConcurrentHashMap<Long, Boolean>()

    private val bot = bot {
        token = apiKey
        dispatch {
            command(HELLO_CMD) {
                val result = bot.sendMessage(chatId = ChatId.fromId(message.chat.id), text = "–ü—Ä–∏–≤–µ—Ç!")
                result.fold({
                    // do nothing
                }, { e ->
                    log.info("Error in $HELLO_CMD command")
                })
            }
            command(REAL_IMAGE_CMD) {
                val chatId = message.chat.id
                usersWaitingForImage[chatId] = true

                val result = bot.sendMessage(
                    chatId = ChatId.fromId(chatId),
                    text = "–ù–∞—á–Ω–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞."
                )
                result.fold({
                    log.info("User $chatId is now waiting for image")
                }, { e ->
                    log.error("Error in $REAL_IMAGE_CMD command: $e")
                    usersWaitingForImage.remove(chatId)
                })
            }
            
            message {
                val chatId = message.chat.id
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if (usersWaitingForImage[chatId] == true && message.photo != null) {
                    handlePhotoMessage(chatId, message.photo!!)
                } else if (usersWaitingForImage[chatId] == true) {
                    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –Ω–µ —Ñ–æ—Ç–æ
                    bot.sendMessage(
                        chatId = ChatId.fromId(chatId),
                        text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞."
                    )
                }
            }

        }
    }

    @PostConstruct
    fun init() {
        bot.startPolling()
        log.info { "Telegram bot started" }
    }
    
    private fun handlePhotoMessage(chatId: Long, photos: List<PhotoSize>) {
        try {
            usersWaitingForImage.remove(chatId)

            bot.sendMessage(
                chatId = ChatId.fromId(chatId),
                text = "–ü–æ–ª—É—á–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞..."
            )

            val firstPhoto = photos.first()

            
            // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            val fileResult = bot.getFile(firstPhoto.fileId)

            fileResult.fold({ file ->
                val fileUrl = "https://api.telegram.org/file/bot$apiKey/${file?.result?.filePath}"
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ ByteArray
                val imageBytes = downloadImageAsBytes(fileUrl)
                
                // –í—ã–∑—ã–≤–∞–µ–º AI —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                runBlocking {
                    aiImageService.generateImage(
                        userPrompt = null,
                        images = arrayOf(imageBytes)
                    ) { base64Image ->
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        sendGeneratedImage(chatId, base64Image)
                    }
                }
                
            }, { error ->
                log.error("Error getting file: $error")
                bot.sendMessage(
                    chatId = ChatId.fromId(chatId),
                    text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: $error"
                )
            })
            
        } catch (e: Exception) {
            log.error("Error handling photo message: ${e.message}", e)
            bot.sendMessage(
                chatId = ChatId.fromId(chatId),
                text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${e.message}"
            )
        }
    }
    
    private fun downloadImageAsBytes(url: String): ByteArray {
        return URL(url).readBytes()
    }
    
    private fun sendGeneratedImage(chatId: Long, base64Image: String) {
        try {
            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –≤ ByteArray
            val imageBytes = getDecoder().decode(base64Image)
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Telegram API
            val result = bot.sendPhoto(
                chatId = ChatId.fromId(chatId),
                photo = TelegramFile.ByByteArray(
                    fileBytes = imageBytes,
                    filename = "generated_interior_${System.currentTimeMillis()}.png"
                ),
                caption = "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—å–µ—Ä –≥–æ—Ç–æ–≤! üè†‚ú®"
            )
            
            result.fold({
                log.info("Successfully sent generated image to user $chatId")
            }, { error ->
                log.error("Error sending generated image: $error")
                bot.sendMessage(
                    chatId = ChatId.fromId(chatId),
                    text = "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $error"
                )
            })
            
        } catch (e: Exception) {
            log.error("Error sending generated image: ${e.message}", e)
            bot.sendMessage(
                chatId = ChatId.fromId(chatId),
                text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${e.message}"
            )
        }
    }
}